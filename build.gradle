import org.gradle.api.internal.artifacts.configurations.DefaultConfiguration

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir

    childProjects.values().forEach(project ->
        delete project.buildDir
    )
}

subprojects {
    afterEvaluate { Project project ->
        def canBeResolvedField = DefaultConfiguration.class.getDeclaredField('canBeResolved')
        canBeResolvedField.setAccessible(true)
        if (hasConfiguration(project, 'implementation')) {
            canBeResolvedField.set(project.configurations.implementation, true)
        }
        if (hasConfiguration(project, 'api')) {
            canBeResolvedField.set(project.configurations.api, true)
        }

        if (project.pluginManager.hasPlugin("java")) {
            project.java {
                sourceCompatibility = JavaVersion.VERSION_1_8
                targetCompatibility = JavaVersion.VERSION_1_8
            }
        }
    }
}

static def hasConfiguration(Project p, String name) {
    try {
        p.configurations.getByName(name)
        return true
    } catch (ignore) {
    }
    return false
}